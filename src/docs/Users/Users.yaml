paths:
  /api/users/profile:
    get:
      summary: Get user profile
      tags:
        - Users
      responses:
        '200':
          description: User profile retrieved successfully
        '403':
          description: Access denied
  /api/users/admin:
    get:
      summary: Access admin panel
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin panel accessed successfully
        '403':
          description: Access denied

  /api/users/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
                age:
                  type: integer
                  example: 30
      responses:
        '200':
          description: User registered successfully
        '409':
          description: User already exists
        '500':
          description: Internal server error
      x-code-samples:
        - lang: JavaScript
          label: Example Payload
          source: |
            {
              "first_name": "John",
              "last_name": "Doe",
              "email": "johndoe@example.com",
              "password": "password123",
              "age": 30
            }
  /api/users/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
  /api/users/logout:
    post:
      summary: Logout a user
      tags:
        - Users
      responses:
        '200':
          description: User logged out successfully
  /api/users/requestPasswordReset:
    post:
      summary: Request password reset
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
      responses:
        '200':
          description: Password reset requested successfully
        '404':
          description: User not found
        '500':
          description: Internal server error
  /reset-password:
    post:
      summary: Reset password
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: newpassword123
                token:
                  type: string
                  example: reset_token
      responses:
        '404':
          description: User not found or invalid token
        '500':
          description: Internal server error
  /api/users/premium/{uid}:
    put:
      summary: Change user role to Premium
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: string
            example: 60c72b2f9b1d4f1f30c8f5b6
      responses:
        '200':
          description: User role changed successfully
        '404':
          description: User not found
        '500':
          description: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        _id: 
          type: ObjectId
          description: MongoDB autogenerated id
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: password123
        age:
          type: integer
          example: 30
        cart:
          type: string
          example: 60c72b2f9b1d4f1f30c8f5b6
        rol:
          type: string
          enum: ['Admin', 'User', 'Premium']
          example: 'User'
        resetToken:
          type: object
          properties:
            token:
              type: string
              example: "reset_token"
            expiresAt:
              type: string
              format: date-time
              example: "2024-05-20T10:00:00Z"
 
    
